import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
/**
 * This class represents a Minesweeper game.
 *
 * @author Jamal Balalrd
 */
public class Minesweeper
{
    /**
     * Constructs an object instance of the {@link Minesweeper} class using the
     * information provided in <code>seedFile</code>.
     *
     * @param seedFile the seed file used to construct the game
     */
    private String[][]gameGrid;
    private Boolean[][]actualGrid;
    private int rounds = 0;
    private int rows;
    private int cols;
    private int mineNumb;
    public Minesweeper(File seedFile)  
    {	
	try{
	    int col = 0;
	    int row = 0;
	    int numOfMines = 0;
	    Scanner seedScanner = new Scanner(seedFile);
	    String firstLine;
	    String secondLine;
	    firstLine = seedScanner.nextLine();
	    secondLine = seedScanner.nextLine();
	    Scanner firstLineScan = new Scanner(firstLine);
	    Scanner secLineScan = new Scanner(secondLine);
	    // checks if the firstline in the seed has exactly two ints
	    if(firstLineScan.hasNextInt()){                                                               
		row = firstLineScan.nextInt();
		if(firstLineScan.hasNextInt()){
		    col = firstLineScan.nextInt();
		    if(firstLineScan.hasNext()){
			System.out.println("Cannnot creat a game with "+ seedFile +", because it is not formatted correctly.");
			System.exit(0);
		    }
		}
		else{
		    System.out.println("Cannot creat a game with "+ seedFile +", because it is not formatted correctly.");
		    System.exit(0);
		}
	    }
	    else{
		System.out.println("Cannot creat a game with "+ seedFile +", because it is not formatted correctly.");
		System.exit(0);
	    }
	    // checks if the secondline has exactly one int
	    if(secLineScan.hasNextInt()){
		numOfMines = secLineScan.nextInt();
		if(firstLineScan.hasNext()){
		    System.out.println("Cannot creat a game with "+ seedFile +", because it is not formatted correctly.");
		    System.exit(0);
		}
	    }
	    // checks if the row and col are valid numbers
	    if( row > 10 | col > 10 | row < 1 | col < 1){                                          
		System.out.println("\nCannot create a mine field with that many rows and/or colums!");
		System.exit(0);

	    }
	    // checks if mines exceed area of grid
	    if(row*col < numOfMines){
		System.out.println("Cannot creat a game with "+ seedFile +", because it is not formatted correctly.");
		System.exit(0);
	    }
	    // after checks, assigns reference variables
	    rows = row;
	    cols = col;
	    mineNumb = numOfMines;
	    this.gameGrid = new String[rows][cols];
	    this.actualGrid = new Boolean[rows][cols];
	    // initializes the acutalGrid to false
	    for(int rowCount = 0; rowCount < gameGrid.length; rowCount++){                         
		for(int colCount = 0; colCount < gameGrid[0].length; colCount++){
		    this.actualGrid[rowCount][colCount] = false;
		}
	    }
	     // initializes the gameGrid to empty strings
	    for(int rowCounts = 0; rowCounts < gameGrid.length; rowCounts++){                      
		for(int colCounts = 0; colCounts < gameGrid[0].length; colCounts++){
		    this.gameGrid[rowCounts][colCounts] = "";
		}
	    }
	    // checks for valid syntax on mine placement
	    for(int i =0;i < numOfMines;i++){
		Scanner currentLine = new Scanner(seedScanner.nextLine());
		int seedRow = 0;
		int seedCol = 0;
		if(currentLine.hasNextInt()){
		    seedRow  = currentLine.nextInt();
		    if(currentLine.hasNextInt()){
			 seedCol = currentLine.nextInt();
			if(firstLineScan.hasNext()){
			    System.out.println("Cannont creat a game with "+ seedFile +", because it is not formatted correctly.");
			    System.exit(0);
			}
		    }
		    else{
			System.out.println("Cannont creat a game with "+ seedFile +", because it is not formatted correctly.");
			System.exit(0);
		    }
		}
		else{
		    System.out.println("Cannont creat a game with "+ seedFile +", because it is not formatted correctly.");
		    System.exit(0);
		}
		// if the syntax is valid, checks bounds and assigns
		if(isInBounds(seedRow,seedCol)){
		    actualGrid[seedRow][seedCol] = true;
		}
		else{
		    System.out.println("Cannont creat a game with "+ seedFile +", because it is not formatted correctly.");
		    System.exit(0);
		}
	    }
	}
	catch(FileNotFoundException nfe){
	}
	

	// TODO implement
    } // Mineseeper
    
    /**
     * Constructs an object instance of the {@link Minsweeper} class using the
     * <code>rows</code> and <code>cols</code> values as the game grid's number 
     * of rows and columns respectively. Additionally, One third (rounded up)
     * of the squares in the grid will be assisgend mines, randomly.
     *
     * @param rows the number of rows in the game grid
     * @param cols the number of cols in the game grid
     */
    public Minesweeper(int rows, int cols)
    {
	// checks if rows and cols are valid sizes
	if( rows > 10 | cols > 10 | rows < 1 | cols < 1){
	    System.out.println("\nCannot create a mine field with that many rows and/or colums!");
	    System.exit(0);
	} 
	this.rows = rows;
	this.cols = cols;
	this.gameGrid = new String[rows][cols];
	this.actualGrid = new Boolean[rows][cols];
	//initializes actualGrid to false
	for(int row = 0; row < gameGrid.length; row++){
	    for(int col = 0; col < gameGrid[0].length; col++){
		actualGrid[row][col] = false;
	    }
	}
	//initilaizes gameGrid to empty Strings
	for(int row = 0; row < gameGrid.length; row++){
	    for(int col = 0; col < gameGrid[0].length; col++){
		gameGrid[row][col] = "";
	    }
	}

	int count = 0;
	mineNumb = (int)Math.ceil(rows * cols / 3.0);
	// loop to add mines randomly
	while(count != mineNumb){
	    for(int row = 0; row < gameGrid.length; row++){
		for(int col = 0; col < gameGrid[0].length; col++){
		    boolean addBomb = false;
		    if(Math.random()*10 >= 7){
			addBomb = true;
		    }  
		    if ( addBomb && count != mineNumb){
			actualGrid[row][col] = true;
			count++;
		    }
		}
	    }
	}
    }// Minsweeper
    /**
     * Starts the game and execute the game loop.
     */
    public void run()
    {
	Scanner scan = new Scanner(System.in);
	//TODO implement
	displayTitle();
	displayGrid();
	boolean playGame = true;
	String input = "";
	while(playGame){
	    input = scan.next().trim();
	    // The quit command
	    if(input.equals("q")|input.equals("quit")){
		System.out.println("\nY U NO PLAY MORE? \nBye!");
		System.exit(0);
	    }
	    // The help command
	    else if(input.equals("h")|input.equals("help")){
		helpCommand();
		displayGrid();
		continue;
	    }
	    // The reveal command
	    else if(input.equals("r")|input.equals("reveal")){
		int row = scan.nextInt();
		int col = scan.nextInt();
		if(isInBounds(row,col)){
		    if(actualGrid[row][col]){
			displayGameOver();
		    }
		    if(getNumAdjMines(row,col) != 0){
			gameGrid[row][col] = getNumAdjMines(row,col) +"";
		    }
		    winCheck();
		    displayGrid();
		    continue;
		}
		else{
		    System.out.println("\nThat index is not in bounds!");
		    displayGrid();
		    continue;
		}
	    }
	    // The mark command
	    else if(input.equals("m")|input.equals("mark")){
		int row = scan.nextInt();
		int col = scan.nextInt();
		if(isInBounds(row,col)){
		    gameGrid[row][col] = "F";
		    winCheck();
		    displayGrid();
		    continue;
		}
		else{
		    System.out.println("\nThat index is not in bounds!");
		    displayGrid();
		    continue;
		}
	    }
	    // The guess command
	    else if(input.equals("g")|input.equals("guess")){
		int row = scan.nextInt();
		int col = scan.nextInt();
		if(isInBounds(row,col)){
		    gameGrid[row][col] = "?";
		    displayGrid();
		    continue;
		}
		else{
		    System.out.println("\nThat index is not in bounds!");
		    displayGrid();
		    continue;
		}
	    }
	    // Unrecongized input
	    else{
		System.out.println("\nCommand not recongized!");
		displayGrid();
		continue;
	    }
		
	}
    } // run
    /**
       display GameOver prints out the ASCII art of "game over" and exits the program
     */	
    private void displayGameOver()
    {
	System.out.println("\n  Oh no... You revealed a mine!");
	System.out.println("  __ _  __ _ _ __ ___   ___    _____   _____ _ __");
	System.out.println(" / _' |/ _' | '_ ' _ \\ / _ \\  / _ \\ \\ / / _ \\ '__|");
	System.out.println("| (_| | (_| | | | | | |  __/ | (_) \\ v /  __/ |");
	System.out.println(" \\__, |\\__,_|_| |_| |_|\\___|  \\___/ \\_/ \\___|_|");
	System.out.println(" |___/");
	System.exit(0);
    }// displayGameOver
    /**
       displaytitle prints out the ASCII art for "Minesweeper"
     */
    private void displayTitle()
    {
	System.out.println("        _");
	System.out.println("  /\\/\\ (_)_ __   ___  _____      _____  ___ _ __   ___ _ __");
	System.out.println(" /    \\| | '_ \\ / _ \\/ __\\ \\ /\\ / / _ \\/ _ \\ '_ \\ / _ \\ '__|");
	System.out.println("/ /\\/\\ \\ | | | |  __/\\__ \\\\ V  V /  __/  __/ |_) |  __/ |");
	System.out.println("\\/    \\/_|_| |_|\\___||___/ \\_/\\_/ \\___|\\___| .__/ \\___|_|");
	System.out.println("                                     ALPHA |_| EDITION");
    }// displayTitle
    /**
       displayGrid prints the Grid and the contents of the gameGrid array
     */
    private void displayGrid(){
	System.out.println("\n Rounds Completed: " + rounds + "\n");
	for(int row = 0; row < rows; row++){
	    System.out.print(" " + row +" |");
	    for(int col = 0; col < cols; col++){
		String holder = " ";
		/**if(actualGrid[row][col]){
		    holder = "B";
		    }              Uncomment to show bomb locations
		*/
		if(gameGrid[row][col] != null && !gameGrid[row][col].equals("")  ){    
		    holder = gameGrid[row][col];
	       	}
		
		System.out.print(" "+ holder +" |");
	    }
	    System.out.println();
	}
	rounds++;
	System.out.print("     ");
	for(int i = 0; i < cols; i++)
	    {
		System.out.print(i +"   ");
	    }
	System.out.print("\n\nminesweeper-alpha$ ");
    }// displayGrid
    /**
       Checks if the given row and col are in the bounds of the game
     */
    private boolean isInBounds(int row, int col){
	if( row < 0 | col < 0 | row > gameGrid[0].length | col > gameGrid.length){
	    return false;
	}
	return true;
    }
    /**
       Returns the number of mines adjacent to the given location
     */
    private int getNumAdjMines(int row, int col){
	int minesAdj = 0;
	// if not on the top row search right above
	if( row > 0){
	    if(actualGrid[row-1][col]){
		minesAdj++;
	    }
	}
	// if not the bottom row search right below
	if ( row < gameGrid.length-1){
	    if(actualGrid[row+1][col]){
		    minesAdj++;
		}
	}
	// if not the rightmost column search the index to the right
	if( col < gameGrid[0].length-1){
	    if(actualGrid[row][col+1]){
		minesAdj++;
	    }
	    // if not the top row serach top right diagonal
	    if( row > 0){
		if(actualGrid[row-1][col+1]){
		    minesAdj++;
		}
	    }
	    // if not the bottom row search bottom right diagonal
	    if( row < gameGrid.length-1){
		if(actualGrid[row+1][col+1]){
		    minesAdj++;
		}
	    }
	}
	// if not the leftmost column search the index to left
	if( col > 0){
	    if(actualGrid[row][col-1]){
		minesAdj++;
	    }
	    // if not the top row search left top diagonal
	    if( row > 0){
		if(actualGrid[row-1][col-1]){
		    minesAdj++;
		}
	    }
	    // if not the bottom row search left bottom diagonal
	    if( row < gameGrid.length-1){
		if(actualGrid[row+1][col-1]){
		    minesAdj++;
		}
	    }
	}
	return minesAdj;
    }
    /**
       Prints out the help command 
     */
    private void helpCommand()
    {
	System.out.println("\nCommands Available...");
	System.out.println(" - Reveal: r/reveal row col\n -   Mark: m/mark   row col");
	System.out.println(" -  Guess: g/guess  row col");
	System.out.println(" -   Help: h/help\n -   Quit: q/quit");
    }// helpCommand
    /**
       Checks to see if the playe has one the game yet.
       First it checks if there are no guesses in the game
       Grid. Then it sees if the amount of bombs found 
       correctly are equals to bombs in the game.
     */
    private void winCheck(){
	int correctGuesses = 0;
	boolean noGuesses = true;
	for(int row = 0; row < gameGrid.length; row++){
	    for(int col = 0; col < gameGrid[0].length; col++){
		if(gameGrid[row][col].equals("?")){
		    noGuesses = false;
		}
	    }
	}
	for(int row = 0; row < gameGrid.length; row++){
	    for(int col = 0; col < gameGrid[0].length; col++){
		if(actualGrid[row][col] && gameGrid[row][col].equals("F")){
		    correctGuesses++;
		}
		if(actualGrid[row][col] == false && gameGrid[row][col].equals("F")){
		    correctGuesses--;
		}
	    }
	}
	if(noGuesses && correctGuesses == mineNumb){
	    System.out.println("CONGRATULATIONS!\nYOU HAVE WON!\nSCORE: " +(rows*cols - mineNumb - rounds));
	    System.exit(0);
	}
	
    }// winCheck
    /**
     * The entry point into the program. This main method does implement some
     * logic for handleing command line arguments. If two integers are provided
     * as arguments, then a Minesweeper game is created and started with a 
     * grid size corresponding to the integers provided and with 1/3 (rounded up)
     * of the sqaures containing mines, placed randomly. If a single word string 
     * provided as an argument then it is treated as a seed file and a Minsweeper
     * game is created and started using the information contained in the seed 
     * file. If none of the above applies, then a usage statment is displayed
     * and the program exits gracefully.
     *
     * @param args the shell arguments provided to the program
     */
    public static void main(String[] args)
    {
	/*
	  The following switch statment has been designed in such a way that if 
	  errors occur within the first two cases, the default case still gets 
	  executed. This was accomplished by specialplacement of the break 
	  statements.
	 */
       
	Minesweeper game = null;

	switch (args.length){
	    
	// random game
	case 2:
	    
	    int rows, cols;

	    // try to parse the arguments and create a game
	    try {
		rows = Integer.parseInt(args[0]);
		cols = Integer.parseInt(args[1]);
		game = new Minesweeper(rows,cols);
		break;
	    } catch (NumberFormatException nfe) {
		// line intentionally left blank
	    } // try

	// seed file game
	case 1:

	    String filename = args[0];
	    File file = new File(filename);

	    if (file.isFile()) {
		game = new Minesweeper(file);
		break;
	    } // if
	// display usage statment
	default:

	    System.out.println("Usage: java Minesweeper [FILE]");
	    System.out.println("Usage: java Minesweeper [ROWS] [COLS]");
	    System.exit(0);

	} // switch
	// if all is good, then run the game
	game.run();

    } // main


} // Minesweeper
